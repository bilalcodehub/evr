# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_utils.ipynb.

# %% auto 0
__all__ = ['simplify', 'rename_files_in_folder']

# %% ../nbs/09_utils.ipynb 2
import os
from tqdm import tqdm

# %% ../nbs/09_utils.ipynb 3
def simplify(filename):
    """
    Remove the date between the first and second underscores in the filename.

    Args:
        filename (str): The original filename.

    Returns:
        str: The filename with the date removed.
    """
    # Find the position of the first underscore
    first_underscore = filename.find('_')
    if first_underscore == -1:
        # No underscores found; return the filename as is
        return filename

    # Find the position of the second underscore after the first
    second_underscore = filename.find('_', first_underscore + 1)
    if second_underscore == -1:
        # Only one underscore found; return the filename as is
        return filename

    # Extract parts before the first underscore and after the second underscore
    part1 = filename[:first_underscore]
    part2 = filename[second_underscore + 1:]

    # Combine the parts with an underscore
    new_filename = f"{part1}_{part2}"
    return new_filename

# %% ../nbs/09_utils.ipynb 4
def rename_files_in_folder(folder_path):
    """
    Rename all files in the specified folder by removing the date between the first and second underscores.
    Shows a progress bar during the operation.

    Args:
        folder_path (str): Path to the folder containing the files.

    Returns:
        None
    """
    # Get a list of files in the folder
    filenames = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]

    # Use tqdm to create a progress bar
    for filename in tqdm(filenames, desc='Renaming files'):
        new_filename = simplify(filename)
        # Rename the file if the name has changed
        if new_filename != filename:
            original_path = os.path.join(folder_path, filename)
            new_path = os.path.join(folder_path, new_filename)

            # Check if the new filename already exists to avoid overwriting
            if os.path.exists(new_path):
                print(f"Error: Cannot rename '{filename}' to '{new_filename}' because it already exists.")
                continue

            os.rename(original_path, new_path)
            # Optionally, you can print the renamed files
            # print(f"Renamed '{filename}' to '{new_filename}'")

# %% ../nbs/09_utils.ipynb 6
# Example usage
if __name__ == "__main__":
    folder_path = 'temset/frames'  # Replace with your folder path
    rename_files_in_folder(folder_path)
